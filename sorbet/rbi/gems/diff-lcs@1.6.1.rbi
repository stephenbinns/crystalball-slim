# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `diff-lcs` gem.
# Please instead update this file by running `bin/tapioca gem diff-lcs`.


# source://diff-lcs//lib/diff/lcs.rb#3
module Diff; end

# source://diff-lcs//lib/diff/lcs.rb#51
module Diff::LCS
  # source://diff-lcs//lib/diff/lcs.rb#76
  def diff(other, callbacks = T.unsafe(nil), &block); end

  # source://diff-lcs//lib/diff/lcs.rb#71
  def lcs(other, &block); end

  # source://diff-lcs//lib/diff/lcs.rb#102
  def patch(patchset); end

  # source://diff-lcs//lib/diff/lcs.rb#110
  def patch!(patchset); end

  # source://diff-lcs//lib/diff/lcs.rb#124
  def patch_me(patchset); end

  # source://diff-lcs//lib/diff/lcs.rb#82
  def sdiff(other, callbacks = T.unsafe(nil), &block); end

  # source://diff-lcs//lib/diff/lcs.rb#95
  def traverse_balanced(other, callbacks = T.unsafe(nil), &block); end

  # source://diff-lcs//lib/diff/lcs.rb#88
  def traverse_sequences(other, callbacks = T.unsafe(nil), &block); end

  # source://diff-lcs//lib/diff/lcs.rb#102
  def unpatch(patchset); end

  # source://diff-lcs//lib/diff/lcs.rb#117
  def unpatch!(patchset); end

  # source://diff-lcs//lib/diff/lcs.rb#135
  def unpatch_me(patchset); end

  class << self
    # source://diff-lcs//lib/diff/lcs.rb#145
    def LCS(seq1, seq2, &block); end

    # source://diff-lcs//lib/diff/lcs/callbacks.rb#52
    def callbacks_for(callbacks); end

    # source://diff-lcs//lib/diff/lcs.rb#169
    def diff(seq1, seq2, callbacks = T.unsafe(nil), &block); end

    # source://diff-lcs//lib/diff/lcs.rb#145
    def lcs(seq1, seq2, &block); end

    # source://diff-lcs//lib/diff/lcs.rb#627
    def patch(src, patchset, direction = T.unsafe(nil)); end

    # source://diff-lcs//lib/diff/lcs.rb#737
    def patch!(src, patchset); end

    # source://diff-lcs//lib/diff/lcs.rb#201
    def sdiff(seq1, seq2, callbacks = T.unsafe(nil), &block); end

    # source://diff-lcs//lib/diff/lcs.rb#476
    def traverse_balanced(seq1, seq2, callbacks = T.unsafe(nil)); end

    # source://diff-lcs//lib/diff/lcs.rb#286
    def traverse_sequences(seq1, seq2, callbacks = T.unsafe(nil)); end

    # source://diff-lcs//lib/diff/lcs.rb#731
    def unpatch!(src, patchset); end

    private

    # source://diff-lcs//lib/diff/lcs/internals.rb#4
    def diff_traversal(method, seq1, seq2, callbacks, &block); end
  end
end

# source://diff-lcs//lib/diff/lcs/callbacks.rb#50
Diff::LCS::BalancedCallbacks = Diff::LCS::DefaultCallbacks

# source://diff-lcs//lib/diff/lcs/block.rb#6
class Diff::LCS::Block
  # source://diff-lcs//lib/diff/lcs/block.rb#9
  def initialize(chunk); end

  # source://diff-lcs//lib/diff/lcs/block.rb#7
  def changes; end

  # source://diff-lcs//lib/diff/lcs/block.rb#21
  def diff_size; end

  # source://diff-lcs//lib/diff/lcs/block.rb#7
  def insert; end

  # source://diff-lcs//lib/diff/lcs/block.rb#25
  def op; end

  # source://diff-lcs//lib/diff/lcs/block.rb#7
  def remove; end
end

# source://diff-lcs//lib/diff/lcs/change.rb#6
class Diff::LCS::Change
  include ::Comparable

  # source://diff-lcs//lib/diff/lcs/change.rb#27
  def initialize(*args); end

  # source://diff-lcs//lib/diff/lcs/change.rb#65
  def <=>(other); end

  # source://diff-lcs//lib/diff/lcs/change.rb#58
  def ==(other); end

  # source://diff-lcs//lib/diff/lcs/change.rb#20
  def action; end

  # source://diff-lcs//lib/diff/lcs/change.rb#72
  def adding?; end

  # source://diff-lcs//lib/diff/lcs/change.rb#84
  def changed?; end

  # source://diff-lcs//lib/diff/lcs/change.rb#76
  def deleting?; end

  # source://diff-lcs//lib/diff/lcs/change.rb#25
  def element; end

  # source://diff-lcs//lib/diff/lcs/change.rb#88
  def finished_a?; end

  # source://diff-lcs//lib/diff/lcs/change.rb#92
  def finished_b?; end

  # source://diff-lcs//lib/diff/lcs/change.rb#34
  def inspect(*_args); end

  # source://diff-lcs//lib/diff/lcs/change.rb#23
  def position; end

  # source://diff-lcs//lib/diff/lcs/change.rb#38
  def to_a; end

  # source://diff-lcs//lib/diff/lcs/change.rb#38
  def to_ary; end

  # source://diff-lcs//lib/diff/lcs/change.rb#80
  def unchanged?; end

  class << self
    # source://diff-lcs//lib/diff/lcs/change.rb#44
    def from_a(arr); end

    # source://diff-lcs//lib/diff/lcs/change.rb#15
    def valid_action?(action); end
  end
end

# source://diff-lcs//lib/diff/lcs/change.rb#7
Diff::LCS::Change::IntClass = Integer

# source://diff-lcs//lib/diff/lcs/change.rb#13
Diff::LCS::Change::VALID_ACTIONS = T.let(T.unsafe(nil), Array)

# source://diff-lcs//lib/diff/lcs/change.rb#100
class Diff::LCS::ContextChange < ::Diff::LCS::Change
  # source://diff-lcs//lib/diff/lcs/change.rb#114
  def initialize(*args); end

  # source://diff-lcs//lib/diff/lcs/change.rb#166
  def <=>(other); end

  # source://diff-lcs//lib/diff/lcs/change.rb#157
  def ==(other); end

  # source://diff-lcs//lib/diff/lcs/change.rb#112
  def new_element; end

  # source://diff-lcs//lib/diff/lcs/change.rb#108
  def new_position; end

  # source://diff-lcs//lib/diff/lcs/change.rb#110
  def old_element; end

  # source://diff-lcs//lib/diff/lcs/change.rb#106
  def old_position; end

  # source://diff-lcs//lib/diff/lcs/change.rb#122
  def to_a; end

  # source://diff-lcs//lib/diff/lcs/change.rb#122
  def to_ary; end

  class << self
    # source://diff-lcs//lib/diff/lcs/change.rb#132
    def from_a(arr); end

    # source://diff-lcs//lib/diff/lcs/change.rb#138
    def simplify(event); end
  end
end

# source://diff-lcs//lib/diff/lcs/callbacks.rb#225
class Diff::LCS::ContextDiffCallbacks < ::Diff::LCS::DiffCallbacks
  # source://diff-lcs//lib/diff/lcs/callbacks.rb#234
  def change(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#226
  def discard_a(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#230
  def discard_b(event); end
end

# source://diff-lcs//lib/diff/lcs/callbacks.rb#14
class Diff::LCS::DefaultCallbacks
  class << self
    # source://diff-lcs//lib/diff/lcs/callbacks.rb#32
    def change(event); end

    # source://diff-lcs//lib/diff/lcs/callbacks.rb#22
    def discard_a(event); end

    # source://diff-lcs//lib/diff/lcs/callbacks.rb#27
    def discard_b(event); end

    # source://diff-lcs//lib/diff/lcs/callbacks.rb#17
    def match(event); end

    private

    def new(*_arg0); end
  end
end

# source://diff-lcs//lib/diff/lcs/callbacks.rb#108
class Diff::LCS::DiffCallbacks
  # source://diff-lcs//lib/diff/lcs/callbacks.rb#112
  def initialize; end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#110
  def diffs; end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#135
  def discard_a(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#139
  def discard_b(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#127
  def finish; end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#131
  def match(_event); end

  private

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#143
  def finish_hunk; end
end

# source://diff-lcs//lib/diff/lcs/hunk.rb#8
class Diff::LCS::Hunk
  # source://diff-lcs//lib/diff/lcs/hunk.rb#16
  def initialize(data_old, data_new, piece, flag_context, file_length_difference); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#64
  def blocks; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#115
  def diff(format, last = T.unsafe(nil)); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#66
  def end_new; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#66
  def end_old; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#67
  def file_length_difference; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#71
  def flag_context; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#73
  def flag_context=(context); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#97
  def merge(hunk); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#347
  def missing_last_newline?(data); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#109
  def overlaps?(hunk); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#65
  def start_new; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#65
  def start_old; end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#97
  def unshift(hunk); end

  private

  # source://diff-lcs//lib/diff/lcs/hunk.rb#222
  def context_diff(last = T.unsafe(nil)); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#316
  def context_range(mode, op); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#284
  def ed_diff(format, last); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#360
  def encode(literal, target_encoding = T.unsafe(nil)); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#364
  def encode_as(string, *args); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#134
  def old_diff(last = T.unsafe(nil)); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#167
  def unified_diff(last = T.unsafe(nil)); end

  # source://diff-lcs//lib/diff/lcs/hunk.rb#331
  def unified_range(mode); end
end

# source://diff-lcs//lib/diff/lcs/hunk.rb#10
Diff::LCS::Hunk::ED_DIFF_OP_ACTION = T.let(T.unsafe(nil), Hash)

# source://diff-lcs//lib/diff/lcs/hunk.rb#9
Diff::LCS::Hunk::OLD_DIFF_OP_ACTION = T.let(T.unsafe(nil), Hash)

# source://diff-lcs//lib/diff/lcs/internals.rb#29
module Diff::LCS::Internals
  class << self
    # source://diff-lcs//lib/diff/lcs/internals.rb#102
    def analyze_patchset(patchset, depth = T.unsafe(nil)); end

    # source://diff-lcs//lib/diff/lcs/internals.rb#147
    def intuit_diff_direction(src, patchset, limit = T.unsafe(nil)); end

    # source://diff-lcs//lib/diff/lcs/internals.rb#41
    def lcs(a, b); end

    private

    # source://diff-lcs//lib/diff/lcs/internals.rb#286
    def inverse_vector(a, vector); end

    # source://diff-lcs//lib/diff/lcs/internals.rb#298
    def position_hash(enum, interval); end

    # source://diff-lcs//lib/diff/lcs/internals.rb#252
    def replace_next_larger(enum, value, last_index = T.unsafe(nil)); end
  end
end

# source://diff-lcs//lib/diff/lcs/callbacks.rb#303
class Diff::LCS::SDiffCallbacks
  # source://diff-lcs//lib/diff/lcs/callbacks.rb#307
  def initialize; end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#324
  def change(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#305
  def diffs; end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#316
  def discard_a(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#320
  def discard_b(event); end

  # source://diff-lcs//lib/diff/lcs/callbacks.rb#312
  def match(event); end
end

# source://diff-lcs//lib/diff/lcs/callbacks.rb#44
Diff::LCS::SequenceCallbacks = Diff::LCS::DefaultCallbacks

# source://diff-lcs//lib/diff/lcs/version.rb#5
Diff::LCS::VERSION = T.let(T.unsafe(nil), String)

# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `git` gem.
# Please instead update this file by running `bin/tapioca gem git`.


# source://git//lib/git.rb#6
module Git
  # source://git//lib/git.rb#49
  def config(name = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://git//lib/git.rb#71
  def global_config(name = T.unsafe(nil), value = T.unsafe(nil)); end

  class << self
    # source://git//lib/git.rb#103
    def bare(git_dir, options = T.unsafe(nil)); end

    # source://git//lib/git.rb#394
    def binary_version(binary_path = T.unsafe(nil)); end

    # source://git//lib/git.rb#193
    def clone(repository_url, directory = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git//lib/git.rb#67
    def config; end

    # source://git//lib/git.rb#63
    def configure; end

    # source://git//lib/git.rb#235
    def default_branch(repository, options = T.unsafe(nil)); end

    # source://git//lib/git.rb#246
    def export(repository, name, options = T.unsafe(nil)); end

    # source://git//lib/git.rb#259
    def global_config(name = T.unsafe(nil), value = T.unsafe(nil)); end

    # source://git//lib/git.rb#323
    def init(directory = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git//lib/git.rb#335
    def ls_remote(location = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git//lib/git.rb#383
    def open(working_dir, options = T.unsafe(nil)); end
  end
end

# source://git//lib/git/author.rb#4
class Git::Author
  # source://git//lib/git/author.rb#7
  def initialize(author_string); end

  # source://git//lib/git/author.rb#5
  def date; end

  # source://git//lib/git/author.rb#5
  def date=(_arg0); end

  # source://git//lib/git/author.rb#5
  def email; end

  # source://git//lib/git/author.rb#5
  def email=(_arg0); end

  # source://git//lib/git/author.rb#5
  def name; end

  # source://git//lib/git/author.rb#5
  def name=(_arg0); end
end

# source://git//lib/git/base.rb#15
class Git::Base
  # source://git//lib/git/base.rb#138
  def initialize(options = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#164
  def add(paths = T.unsafe(nil), **options); end

  # source://git//lib/git/base.rb#178
  def add_remote(name, url, opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#547
  def add_tag(name, *options); end

  # source://git//lib/git/base.rb#571
  def apply(file); end

  # source://git//lib/git/base.rb#577
  def apply_mail(file); end

  # source://git//lib/git/base.rb#558
  def archive(treeish, file = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#696
  def branch(branch_name = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#702
  def branches; end

  # source://git//lib/git/base.rb#679
  def cat_file(objectish); end

  # source://git//lib/git/base.rb#216
  def chdir; end

  # source://git//lib/git/base.rb#425
  def checkout(*args, **options); end

  # source://git//lib/git/base.rb#430
  def checkout_file(version, file); end

  # source://git//lib/git/base.rb#615
  def checkout_index(opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#371
  def clean(opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#412
  def commit(message, opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#419
  def commit_all(message, opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#718
  def commit_tree(tree = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#227
  def config(name = T.unsafe(nil), value = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#691
  def current_branch; end

  # source://git//lib/git/base.rb#553
  def delete_tag(name); end

  # source://git//lib/git/base.rb#390
  def describe(committish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#723
  def diff(objectish = T.unsafe(nil), obj2 = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#243
  def dir; end

  # source://git//lib/git/base.rb#474
  def each_conflict(&block); end

  # source://git//lib/git/base.rb#436
  def fetch(remote = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#728
  def gblob(objectish); end

  # source://git//lib/git/base.rb#567
  def gc; end

  # source://git//lib/git/base.rb#733
  def gcommit(objectish); end

  # source://git//lib/git/base.rb#335
  def grep(string, path_limiter = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#738
  def gtree(objectish); end

  # source://git//lib/git/base.rb#342
  def ignored_files; end

  # source://git//lib/git/base.rb#248
  def index; end

  # source://git//lib/git/base.rb#292
  def is_branch?(branch); end

  # source://git//lib/git/base.rb#280
  def is_local_branch?(branch); end

  # source://git//lib/git/base.rb#286
  def is_remote_branch?(branch); end

  # source://git//lib/git/base.rb#300
  def lib; end

  # source://git//lib/git/base.rb#743
  def log(count = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#637
  def ls_files(location = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#675
  def ls_tree(objectish, opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#469
  def merge(branch, message = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#780
  def merge_base(*args); end

  # source://git//lib/git/base.rb#757
  def object(objectish); end

  # source://git//lib/git/base.rb#497
  def pull(remote = T.unsafe(nil), branch = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#462
  def push(*args, **options); end

  # source://git//lib/git/base.rb#619
  def read_tree(treeish, opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#762
  def remote(remote_name = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#502
  def remotes; end

  # source://git//lib/git/base.rb#347
  def remove(path = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#520
  def remove_remote(name); end

  # source://git//lib/git/base.rb#563
  def repack; end

  # source://git//lib/git/base.rb#254
  def repo; end

  # source://git//lib/git/base.rb#259
  def repo_size; end

  # source://git//lib/git/base.rb#354
  def reset(commitish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#359
  def reset_hard(commitish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#668
  def rev_parse(objectish); end

  # source://git//lib/git/base.rb#400
  def revert(commitish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#668
  def revparse(objectish); end

  # source://git//lib/git/base.rb#347
  def rm(path = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#269
  def set_index(index_file, check = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#511
  def set_remote_url(name, url); end

  # source://git//lib/git/base.rb#274
  def set_working(work_dir, check = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#586
  def show(objectish = T.unsafe(nil), path = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#767
  def status; end

  # source://git//lib/git/base.rb#772
  def tag(tag_name); end

  # source://git//lib/git/base.rb#525
  def tags; end

  # source://git//lib/git/base.rb#632
  def update_ref(branch, commit); end

  # source://git//lib/git/base.rb#592
  def with_index(new_index); end

  # source://git//lib/git/base.rb#600
  def with_temp_index(&blk); end

  # source://git//lib/git/base.rb#652
  def with_temp_working(&blk); end

  # source://git//lib/git/base.rb#641
  def with_working(work_dir); end

  # source://git//lib/git/base.rb#707
  def worktree(dir, commitish = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#713
  def worktrees; end

  # source://git//lib/git/base.rb#627
  def write_and_commit_tree(opts = T.unsafe(nil)); end

  # source://git//lib/git/base.rb#623
  def write_tree; end

  class << self
    # source://git//lib/git/base.rb#17
    def bare(git_dir, options = T.unsafe(nil)); end

    # source://git//lib/git/base.rb#41
    def binary_version(binary_path); end

    # source://git//lib/git/base.rb#23
    def clone(repository_url, directory, options = T.unsafe(nil)); end

    # source://git//lib/git/base.rb#37
    def config; end

    # source://git//lib/git/base.rb#62
    def init(directory = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git//lib/git/base.rb#106
    def open(working_dir, options = T.unsafe(nil)); end

    # source://git//lib/git/base.rb#30
    def repository_default_branch(repository, options = T.unsafe(nil)); end

    # source://git//lib/git/base.rb#88
    def root_of_worktree(working_dir); end

    private

    # source://git//lib/git/base.rb#869
    def normalize_index(options); end

    # source://git//lib/git/base.rb#797
    def normalize_paths(options, default_working_directory: T.unsafe(nil), default_repository: T.unsafe(nil), bare: T.unsafe(nil)); end

    # source://git//lib/git/base.rb#849
    def normalize_repository(options, default:, bare: T.unsafe(nil)); end

    # source://git//lib/git/base.rb#816
    def normalize_working_directory(options, default:, bare: T.unsafe(nil)); end
  end
end

# source://git//lib/git/branch.rb#6
class Git::Branch < ::Git::Path
  # source://git//lib/git/branch.rb#9
  def initialize(base, name); end

  # source://git//lib/git/branch.rb#31
  def archive(file, opts = T.unsafe(nil)); end

  # source://git//lib/git/branch.rb#26
  def checkout; end

  # source://git//lib/git/branch.rb#63
  def contains?(commit); end

  # source://git//lib/git/branch.rb#51
  def create; end

  # source://git//lib/git/branch.rb#59
  def current; end

  # source://git//lib/git/branch.rb#55
  def delete; end

  # source://git//lib/git/branch.rb#7
  def full; end

  # source://git//lib/git/branch.rb#7
  def full=(_arg0); end

  # source://git//lib/git/branch.rb#17
  def gcommit; end

  # source://git//lib/git/branch.rb#40
  def in_branch(message = T.unsafe(nil)); end

  # source://git//lib/git/branch.rb#67
  def merge(branch = T.unsafe(nil), message = T.unsafe(nil)); end

  # source://git//lib/git/branch.rb#7
  def name; end

  # source://git//lib/git/branch.rb#7
  def name=(_arg0); end

  # source://git//lib/git/branch.rb#7
  def remote; end

  # source://git//lib/git/branch.rb#7
  def remote=(_arg0); end

  # source://git//lib/git/branch.rb#22
  def stashes; end

  # source://git//lib/git/branch.rb#88
  def to_a; end

  # source://git//lib/git/branch.rb#92
  def to_s; end

  # source://git//lib/git/branch.rb#80
  def update_ref(commit); end

  private

  # source://git//lib/git/branch.rb#98
  def check_if_create; end

  # source://git//lib/git/branch.rb#102
  def determine_current; end

  # source://git//lib/git/branch.rb#137
  def parse_name(name); end
end

# source://git//lib/git/branch.rb#106
Git::Branch::BRANCH_NAME_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://git//lib/git/branches.rb#6
class Git::Branches
  include ::Enumerable

  # source://git//lib/git/branches.rb#10
  def initialize(base); end

  # source://git//lib/git/branches.rb#51
  def [](branch_name); end

  # source://git//lib/git/branches.rb#34
  def each(&block); end

  # source://git//lib/git/branches.rb#20
  def local; end

  # source://git//lib/git/branches.rb#24
  def remote; end

  # source://git//lib/git/branches.rb#30
  def size; end

  # source://git//lib/git/branches.rb#63
  def to_s; end
end

# source://git//lib/git/command_line.rb#13
class Git::CommandLine
  # source://git//lib/git/command_line.rb#28
  def initialize(env, binary_path, global_opts, logger); end

  # source://git//lib/git/command_line.rb#62
  def binary_path; end

  # source://git//lib/git/command_line.rb#49
  def env; end

  # source://git//lib/git/command_line.rb#81
  def global_opts; end

  # source://git//lib/git/command_line.rb#96
  def logger; end

  # source://git//lib/git/command_line.rb#192
  def run(*args, normalize:, chomp:, merge:, out: T.unsafe(nil), err: T.unsafe(nil), chdir: T.unsafe(nil), timeout: T.unsafe(nil)); end

  private

  # source://git//lib/git/command_line.rb#208
  def build_git_cmd(args); end

  # source://git//lib/git/command_line.rb#276
  def post_process(raw_output, normalize, chomp); end

  # source://git//lib/git/command_line.rb#255
  def post_process_all(raw_outputs, normalize, chomp); end

  # source://git//lib/git/command_line.rb#233
  def process_result(result, normalize, chomp, timeout); end
end

# source://git//lib/git/errors.rb#85
class Git::CommandLineError < ::Git::Error
  # source://git//lib/git/errors.rb#97
  def initialize(result); end

  # source://git//lib/git/errors.rb#109
  def error_message; end

  # source://git//lib/git/errors.rb#122
  def result; end
end

# source://git//lib/git/command_line_result.rb#10
class Git::CommandLineResult
  # source://git//lib/git/command_line_result.rb#26
  def initialize(git_cmd, status, stdout, stderr); end

  # source://git//lib/git/command_line_result.rb#44
  def git_cmd; end

  # source://git//lib/git/command_line_result.rb#58
  def status; end

  # source://git//lib/git/command_line_result.rb#84
  def stderr; end

  # source://git//lib/git/command_line_result.rb#71
  def stdout; end
end

# source://git//lib/git/config.rb#5
class Git::Config
  # source://git//lib/git/config.rb#9
  def initialize; end

  # source://git//lib/git/config.rb#15
  def binary_path; end

  # source://git//lib/git/config.rb#7
  def binary_path=(_arg0); end

  # source://git//lib/git/config.rb#19
  def git_ssh; end

  # source://git//lib/git/config.rb#7
  def git_ssh=(_arg0); end

  # source://git//lib/git/config.rb#23
  def timeout; end

  # source://git//lib/git/config.rb#7
  def timeout=(_arg0); end
end

# source://git//lib/git.rb#7
Git::Deprecation = T.let(T.unsafe(nil), ActiveSupport::Deprecation)

# source://git//lib/git/diff.rb#6
class Git::Diff
  include ::Enumerable

  # source://git//lib/git/diff.rb#9
  def initialize(base, from = T.unsafe(nil), to = T.unsafe(nil)); end

  # source://git//lib/git/diff.rb#64
  def [](key); end

  # source://git//lib/git/diff.rb#40
  def deletions; end

  # source://git//lib/git/diff.rb#69
  def each(&block); end

  # source://git//lib/git/diff.rb#19
  def from; end

  # source://git//lib/git/diff.rb#45
  def insertions; end

  # source://git//lib/git/diff.rb#35
  def lines; end

  # source://git//lib/git/diff.rb#21
  def name_status; end

  # source://git//lib/git/diff.rb#56
  def patch(file = T.unsafe(nil)); end

  # source://git//lib/git/diff.rb#25
  def path(path); end

  # source://git//lib/git/diff.rb#30
  def size; end

  # source://git//lib/git/diff.rb#50
  def stats; end

  # source://git//lib/git/diff.rb#19
  def to; end

  # source://git//lib/git/diff.rb#56
  def to_s(file = T.unsafe(nil)); end

  private

  # source://git//lib/git/diff.rb#105
  def cache_full; end

  # source://git//lib/git/diff.rb#119
  def cache_name_status; end

  # source://git//lib/git/diff.rb#115
  def cache_stats; end

  # source://git//lib/git/diff.rb#109
  def process_full; end

  # source://git//lib/git/diff.rb#124
  def process_full_diff; end
end

# source://git//lib/git/diff.rb#74
class Git::Diff::DiffFile
  # source://git//lib/git/diff.rb#79
  def initialize(base, hash); end

  # source://git//lib/git/diff.rb#90
  def binary?; end

  # source://git//lib/git/diff.rb#94
  def blob(type = T.unsafe(nil)); end

  # source://git//lib/git/diff.rb#75
  def dst; end

  # source://git//lib/git/diff.rb#75
  def dst=(_arg0); end

  # source://git//lib/git/diff.rb#75
  def mode; end

  # source://git//lib/git/diff.rb#75
  def mode=(_arg0); end

  # source://git//lib/git/diff.rb#75
  def patch; end

  # source://git//lib/git/diff.rb#75
  def patch=(_arg0); end

  # source://git//lib/git/diff.rb#75
  def path; end

  # source://git//lib/git/diff.rb#75
  def path=(_arg0); end

  # source://git//lib/git/diff.rb#75
  def src; end

  # source://git//lib/git/diff.rb#75
  def src=(_arg0); end

  # source://git//lib/git/diff.rb#75
  def type; end

  # source://git//lib/git/diff.rb#75
  def type=(_arg0); end
end

# source://git//lib/git/diff.rb#77
Git::Diff::DiffFile::NIL_BLOB_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://git//lib/git/encoding_utils.rb#7
module Git::EncodingUtils
  class << self
    # source://git//lib/git/encoding_utils.rb#12
    def best_guess_encoding; end

    # source://git//lib/git/encoding_utils.rb#8
    def default_encoding; end

    # source://git//lib/git/encoding_utils.rb#17
    def detected_encoding(str); end

    # source://git//lib/git/encoding_utils.rb#21
    def encoding_options; end

    # source://git//lib/git/encoding_utils.rb#25
    def normalize_encoding(str); end
  end
end

# source://git//lib/git/errors.rb#61
class Git::Error < ::StandardError; end

# source://git//lib/git/escaped_path.rb#14
class Git::EscapedPath
  # source://git//lib/git/escaped_path.rb#31
  def initialize(path); end

  # source://git//lib/git/escaped_path.rb#29
  def path; end

  # source://git//lib/git/escaped_path.rb#36
  def unescape; end

  private

  # source://git//lib/git/escaped_path.rb#66
  def escaped_path_to_bytes(path); end

  # source://git//lib/git/escaped_path.rb#48
  def extract_escape(path, index); end

  # source://git//lib/git/escaped_path.rb#44
  def extract_octal(path, index); end

  # source://git//lib/git/escaped_path.rb#52
  def extract_single_char(path, index); end

  # source://git//lib/git/escaped_path.rb#56
  def next_byte(path, index); end
end

# source://git//lib/git/escaped_path.rb#15
Git::EscapedPath::UNESCAPES = T.let(T.unsafe(nil), Hash)

# source://git//lib/git/errors.rb#132
class Git::FailedError < ::Git::CommandLineError; end

# source://git//lib/git/url.rb#85
class Git::GitAltURI < ::Addressable::URI
  # source://git//lib/git/url.rb#96
  def initialize(user:, host:, path:); end

  # source://git//lib/git/url.rb#119
  def to_s; end
end

# source://git//lib/git/errors.rb#70
Git::GitExecuteError = Git::Error

# source://git//lib/git/index.rb#4
class Git::Index < ::Git::Path; end

# source://git//lib/git/lib.rb#14
class Git::Lib
  # source://git//lib/git/lib.rb#61
  def initialize(base = T.unsafe(nil), logger = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1028
  def add(paths = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1136
  def apply(patch_file); end

  # source://git//lib/git/lib.rb#1142
  def apply_mail(patch_file); end

  # source://git//lib/git/lib.rb#1456
  def archive(sha, file = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#809
  def assert_args_are_not_options(arg_name, *args); end

  # source://git//lib/git/lib.rb#767
  def branch_contains(commit, branch_name = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#762
  def branch_current; end

  # source://git//lib/git/lib.rb#1189
  def branch_delete(branch); end

  # source://git//lib/git/lib.rb#1185
  def branch_new(branch); end

  # source://git//lib/git/lib.rb#645
  def branches_all; end

  # source://git//lib/git/lib.rb#448
  def cat_file_commit(object); end

  # source://git//lib/git/lib.rb#374
  def cat_file_contents(object, &block); end

  # source://git//lib/git/lib.rb#422
  def cat_file_size(object); end

  # source://git//lib/git/lib.rb#526
  def cat_file_tag(object); end

  # source://git//lib/git/lib.rb#404
  def cat_file_type(object); end

  # source://git//lib/git/lib.rb#617
  def change_head_branch(branch_name); end

  # source://git//lib/git/lib.rb#1202
  def checkout(branch = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1217
  def checkout_file(version, file); end

  # source://git//lib/git/lib.rb#1439
  def checkout_index(opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1115
  def clean(opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#122
  def clone(repository_url, directory, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1081
  def commit(message, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#448
  def commit_data(object); end

  # source://git//lib/git/lib.rb#1425
  def commit_tree(tree, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1512
  def compare_version_to(*other_version); end

  # source://git//lib/git/lib.rb#958
  def config_get(name); end

  # source://git//lib/git/lib.rb#966
  def config_list; end

  # source://git//lib/git/lib.rb#948
  def config_remote(name); end

  # source://git//lib/git/lib.rb#1002
  def config_set(name, value, options = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1256
  def conflicts; end

  # source://git//lib/git/lib.rb#745
  def current_branch_state; end

  # source://git//lib/git/lib.rb#1493
  def current_command_version; end

  # source://git//lib/git/lib.rb#198
  def describe(commit_ish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#866
  def diff_files; end

  # source://git//lib/git/lib.rb#816
  def diff_full(obj1 = T.unsafe(nil), obj2 = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#871
  def diff_index(treeish); end

  # source://git//lib/git/lib.rb#849
  def diff_name_status(reference1 = T.unsafe(nil), reference2 = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#827
  def diff_stats(obj1 = T.unsafe(nil), obj2 = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#478
  def each_cat_file_header(data); end

  # source://git//lib/git/lib.rb#1057
  def empty?; end

  # source://git//lib/git/lib.rb#1328
  def fetch(remote, opts); end

  # source://git//lib/git/lib.rb#300
  def full_log_commits(opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#609
  def full_tree(sha); end

  # source://git//lib/git/lib.rb#1409
  def gc; end

  # source://git//lib/git/lib.rb#30
  def git_dir; end

  # source://git//lib/git/lib.rb#39
  def git_index_file; end

  # source://git//lib/git/lib.rb#21
  def git_work_dir; end

  # source://git//lib/git/lib.rb#962
  def global_config_get(name); end

  # source://git//lib/git/lib.rb#970
  def global_config_list; end

  # source://git//lib/git/lib.rb#1010
  def global_config_set(name, value); end

  # source://git//lib/git/lib.rb#774
  def grep(string, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#940
  def ignored_files; end

  # source://git//lib/git/lib.rb#86
  def init(opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#707
  def list_files(ref_dir); end

  # source://git//lib/git/lib.rb#250
  def log_commits(opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#887
  def ls_files(location = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#923
  def ls_remote(location = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#588
  def ls_tree(sha, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1520
  def meets_required_version?; end

  # source://git//lib/git/lib.rb#1224
  def merge(branch, message = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1233
  def merge_base(*args); end

  # source://git//lib/git/lib.rb#605
  def mv(file1, file2); end

  # source://git//lib/git/lib.rb#350
  def name_rev(commit_ish); end

  # source://git//lib/git/lib.rb#350
  def namerev(commit_ish); end

  # source://git//lib/git/lib.rb#374
  def object_contents(object, &block); end

  # source://git//lib/git/lib.rb#422
  def object_size(object); end

  # source://git//lib/git/lib.rb#404
  def object_type(object); end

  # source://git//lib/git/lib.rb#983
  def parse_config(file); end

  # source://git//lib/git/lib.rb#974
  def parse_config_list(lines); end

  # source://git//lib/git/lib.rb#457
  def process_commit_data(data, sha); end

  # source://git//lib/git/lib.rb#547
  def process_commit_log_data(data); end

  # source://git//lib/git/lib.rb#535
  def process_tag_data(data, name); end

  # source://git//lib/git/lib.rb#1382
  def pull(remote = T.unsafe(nil), branch = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1345
  def push(remote = T.unsafe(nil), branch = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1414
  def read_tree(treeish, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1272
  def remote_add(name, url, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1291
  def remote_remove(name); end

  # source://git//lib/git/lib.rb#1283
  def remote_set_url(name, url); end

  # source://git//lib/git/lib.rb#1295
  def remotes; end

  # source://git//lib/git/lib.rb#1405
  def repack; end

  # source://git//lib/git/lib.rb#160
  def repository_default_branch(repository); end

  # source://git//lib/git/lib.rb#1516
  def required_command_version; end

  # source://git//lib/git/lib.rb#1108
  def reset(commit, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#146
  def return_base_opts_from_clone(clone_dir, opts); end

  # source://git//lib/git/lib.rb#333
  def rev_parse(revision); end

  # source://git//lib/git/lib.rb#1125
  def revert(commitish, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#333
  def revparse(revision); end

  # source://git//lib/git/lib.rb#1043
  def rm(path = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#992
  def show(objectish = T.unsafe(nil), path = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1169
  def stash_apply(id = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1177
  def stash_clear; end

  # source://git//lib/git/lib.rb#1181
  def stash_list; end

  # source://git//lib/git/lib.rb#1164
  def stash_save(message); end

  # source://git//lib/git/lib.rb#1148
  def stashes_all; end

  # source://git//lib/git/lib.rb#1303
  def tag(name, *opts); end

  # source://git//lib/git/lib.rb#526
  def tag_data(object); end

  # source://git//lib/git/lib.rb#1392
  def tag_sha(tag_name); end

  # source://git//lib/git/lib.rb#1299
  def tags; end

  # source://git//lib/git/lib.rb#613
  def tree_depth(sha); end

  # source://git//lib/git/lib.rb#915
  def unescape_quoted_path(path); end

  # source://git//lib/git/lib.rb#662
  def unexpected_branch_line_error(lines, line, index); end

  # source://git//lib/git/lib.rb#1248
  def unmerged; end

  # source://git//lib/git/lib.rb#944
  def untracked_files; end

  # source://git//lib/git/lib.rb#1435
  def update_ref(ref, commit); end

  # source://git//lib/git/lib.rb#694
  def worktree_add(dir, commitish = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#703
  def worktree_prune; end

  # source://git//lib/git/lib.rb#699
  def worktree_remove(dir); end

  # source://git//lib/git/lib.rb#674
  def worktrees_all; end

  # source://git//lib/git/lib.rb#1421
  def write_tree; end

  private

  # source://git//lib/git/lib.rb#1625
  def command(*args, out: T.unsafe(nil), err: T.unsafe(nil), normalize: T.unsafe(nil), chomp: T.unsafe(nil), merge: T.unsafe(nil), chdir: T.unsafe(nil), timeout: T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1571
  def command_line; end

  # source://git//lib/git/lib.rb#1535
  def command_lines(cmd, *opts, chdir: T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1636
  def diff_as_hash(diff_command, opts = T.unsafe(nil)); end

  # source://git//lib/git/lib.rb#1545
  def env_overrides; end

  # source://git//lib/git/lib.rb#1554
  def global_opts; end

  # source://git//lib/git/lib.rb#1660
  def log_common_options(opts); end

  # source://git//lib/git/lib.rb#1684
  def log_path_options(opts); end

  class << self
    # source://git//lib/git/lib.rb#1524
    def warn_if_old_command(lib); end
  end
end

# source://git//lib/git/lib.rb#621
Git::Lib::BRANCH_LINE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://git//lib/git/lib.rb#476
Git::Lib::CAT_FILE_HEADER_LINE = T.let(T.unsafe(nil), Regexp)

# source://git//lib/git/lib.rb#739
class Git::Lib::HeadState < ::Struct
  def name; end
  def name=(_); end
  def state; end
  def state=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://git//lib/git/log.rb#26
class Git::Log
  include ::Enumerable

  # source://git//lib/git/log.rb#41
  def initialize(base, max_count = T.unsafe(nil)); end

  # source://git//lib/git/log.rb#163
  def [](index); end

  # source://git//lib/git/log.rb#76
  def all; end

  # source://git//lib/git/log.rb#88
  def author(regex); end

  # source://git//lib/git/log.rb#124
  def between(sha1, sha2 = T.unsafe(nil)); end

  # source://git//lib/git/log.rb#130
  def cherry; end

  # source://git//lib/git/log.rb#148
  def each(&block); end

  # source://git//lib/git/log.rb#153
  def first; end

  # source://git//lib/git/log.rb#94
  def grep(regex); end

  # source://git//lib/git/log.rb#158
  def last; end

  # source://git//lib/git/log.rb#58
  def max_count(num_or_all); end

  # source://git//lib/git/log.rb#82
  def object(objectish); end

  # source://git//lib/git/log.rb#100
  def path(path); end

  # source://git//lib/git/log.rb#112
  def since(date); end

  # source://git//lib/git/log.rb#143
  def size; end

  # source://git//lib/git/log.rb#106
  def skip(num); end

  # source://git//lib/git/log.rb#136
  def to_s; end

  # source://git//lib/git/log.rb#118
  def until(date); end

  private

  # source://git//lib/git/log.rb#175
  def check_log; end

  # source://git//lib/git/log.rb#171
  def dirty_log; end

  # source://git//lib/git/log.rb#183
  def run_log; end
end

# source://git//lib/git/object.rb#11
class Git::Object
  class << self
    # source://git//lib/git/object.rb#296
    def new(base, objectish, type = T.unsafe(nil), is_tag = T.unsafe(nil)); end
  end
end

# source://git//lib/git/object.rb#13
class Git::Object::AbstractObject
  # source://git//lib/git/object.rb#18
  def initialize(base, objectish); end

  # source://git//lib/git/object.rb#71
  def archive(file = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/object.rb#77
  def blob?; end

  # source://git//lib/git/object.rb#79
  def commit?; end

  # source://git//lib/git/object.rb#41
  def contents(&block); end

  # source://git//lib/git/object.rb#49
  def contents_array; end

  # source://git//lib/git/object.rb#62
  def diff(objectish); end

  # source://git//lib/git/object.rb#57
  def grep(string, path_limiter = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git//lib/git/object.rb#66
  def log(count = T.unsafe(nil)); end

  # source://git//lib/git/object.rb#14
  def mode; end

  # source://git//lib/git/object.rb#14
  def mode=(_arg0); end

  # source://git//lib/git/object.rb#14
  def objectish; end

  # source://git//lib/git/object.rb#14
  def objectish=(_arg0); end

  # source://git//lib/git/object.rb#27
  def sha; end

  # source://git//lib/git/object.rb#31
  def size; end

  # source://git//lib/git/object.rb#16
  def size=(_arg0); end

  # source://git//lib/git/object.rb#81
  def tag?; end

  # source://git//lib/git/object.rb#53
  def to_s; end

  # source://git//lib/git/object.rb#75
  def tree?; end

  # source://git//lib/git/object.rb#14
  def type; end

  # source://git//lib/git/object.rb#14
  def type=(_arg0); end
end

# source://git//lib/git/object.rb#86
class Git::Object::Blob < ::Git::Object::AbstractObject
  # source://git//lib/git/object.rb#88
  def initialize(base, sha, mode = T.unsafe(nil)); end

  # source://git//lib/git/object.rb#93
  def blob?; end
end

# source://git//lib/git/object.rb#160
class Git::Object::Commit < ::Git::Object::AbstractObject
  # source://git//lib/git/object.rb#162
  def initialize(base, sha, init = T.unsafe(nil)); end

  # source://git//lib/git/object.rb#199
  def author; end

  # source://git//lib/git/object.rb#204
  def author_date; end

  # source://git//lib/git/object.rb#232
  def commit?; end

  # source://git//lib/git/object.rb#209
  def committer; end

  # source://git//lib/git/object.rb#214
  def committer_date; end

  # source://git//lib/git/object.rb#214
  def date; end

  # source://git//lib/git/object.rb#219
  def diff_parent; end

  # source://git//lib/git/object.rb#183
  def gtree; end

  # source://git//lib/git/object.rb#174
  def message; end

  # source://git//lib/git/object.rb#179
  def name; end

  # source://git//lib/git/object.rb#188
  def parent; end

  # source://git//lib/git/object.rb#193
  def parents; end

  # source://git//lib/git/object.rb#223
  def set_commit(data); end

  private

  # source://git//lib/git/object.rb#239
  def check_commit; end
end

# source://git//lib/git/object.rb#248
class Git::Object::Tag < ::Git::Object::AbstractObject
  # source://git//lib/git/object.rb#251
  def initialize(base, sha, name); end

  # source://git//lib/git/object.rb#258
  def annotated?; end

  # source://git//lib/git/object.rb#262
  def message; end

  # source://git//lib/git/object.rb#249
  def name; end

  # source://git//lib/git/object.rb#249
  def name=(_arg0); end

  # source://git//lib/git/object.rb#267
  def tag?; end

  # source://git//lib/git/object.rb#271
  def tagger; end

  private

  # source://git//lib/git/object.rb#278
  def check_tag; end
end

# source://git//lib/git/object.rb#99
class Git::Object::Tree < ::Git::Object::AbstractObject
  # source://git//lib/git/object.rb#101
  def initialize(base, sha, mode = T.unsafe(nil)); end

  # source://git//lib/git/object.rb#112
  def blobs; end

  # source://git//lib/git/object.rb#108
  def children; end

  # source://git//lib/git/object.rb#127
  def depth; end

  # source://git//lib/git/object.rb#112
  def files; end

  # source://git//lib/git/object.rb#123
  def full_tree; end

  # source://git//lib/git/object.rb#117
  def subdirectories; end

  # source://git//lib/git/object.rb#117
  def subtrees; end

  # source://git//lib/git/object.rb#131
  def tree?; end

  # source://git//lib/git/object.rb#117
  def trees; end

  private

  # source://git//lib/git/object.rb#138
  def check_tree; end
end

# source://git//lib/git/path.rb#5
class Git::Path
  # source://git//lib/git/path.rb#9
  def initialize(path, check_path = T.unsafe(nil)); end

  # source://git//lib/git/path.rb#7
  def path; end

  # source://git//lib/git/path.rb#7
  def path=(_arg0); end

  # source://git//lib/git/path.rb#19
  def readable?; end

  # source://git//lib/git/path.rb#27
  def to_s; end

  # source://git//lib/git/path.rb#23
  def writable?; end
end

# source://git//lib/git/errors.rb#199
class Git::ProcessIOError < ::Git::Error; end

# source://git//lib/git/remote.rb#4
class Git::Remote < ::Git::Path
  # source://git//lib/git/remote.rb#8
  def initialize(base, name); end

  # source://git//lib/git/remote.rb#26
  def branch(branch = T.unsafe(nil)); end

  # source://git//lib/git/remote.rb#16
  def fetch(opts = T.unsafe(nil)); end

  # source://git//lib/git/remote.rb#6
  def fetch_opts; end

  # source://git//lib/git/remote.rb#6
  def fetch_opts=(_arg0); end

  # source://git//lib/git/remote.rb#21
  def merge(branch = T.unsafe(nil)); end

  # source://git//lib/git/remote.rb#6
  def name; end

  # source://git//lib/git/remote.rb#6
  def name=(_arg0); end

  # source://git//lib/git/remote.rb#31
  def remove; end

  # source://git//lib/git/remote.rb#35
  def to_s; end

  # source://git//lib/git/remote.rb#6
  def url; end

  # source://git//lib/git/remote.rb#6
  def url=(_arg0); end
end

# source://git//lib/git/repository.rb#5
class Git::Repository < ::Git::Path; end

# source://git//lib/git/errors.rb#138
class Git::SignaledError < ::Git::CommandLineError; end

# source://git//lib/git/stash.rb#4
class Git::Stash
  # source://git//lib/git/stash.rb#6
  def initialize(base, message, existing = T.unsafe(nil)); end

  # source://git//lib/git/stash.rb#20
  def message; end

  # source://git//lib/git/stash.rb#12
  def save; end

  # source://git//lib/git/stash.rb#16
  def saved?; end

  # source://git//lib/git/stash.rb#24
  def to_s; end
end

# source://git//lib/git/stashes.rb#6
class Git::Stashes
  include ::Enumerable

  # source://git//lib/git/stashes.rb#9
  def initialize(base); end

  # source://git//lib/git/stashes.rb#52
  def [](index); end

  # source://git//lib/git/stashes.rb#26
  def all; end

  # source://git//lib/git/stashes.rb#35
  def apply(index = T.unsafe(nil)); end

  # source://git//lib/git/stashes.rb#39
  def clear; end

  # source://git//lib/git/stashes.rb#48
  def each(&block); end

  # source://git//lib/git/stashes.rb#30
  def save(message); end

  # source://git//lib/git/stashes.rb#44
  def size; end
end

# source://git//lib/git/status.rb#13
class Git::Status
  include ::Enumerable

  # source://git//lib/git/status.rb#16
  def initialize(base); end

  # source://git//lib/git/status.rb#126
  def [](file); end

  # source://git//lib/git/status.rb#46
  def added; end

  # source://git//lib/git/status.rb#58
  def added?(file); end

  # source://git//lib/git/status.rb#26
  def changed; end

  # source://git//lib/git/status.rb#38
  def changed?(file); end

  # source://git//lib/git/status.rb#67
  def deleted; end

  # source://git//lib/git/status.rb#79
  def deleted?(file); end

  # source://git//lib/git/status.rb#130
  def each(&block); end

  # source://git//lib/git/status.rb#104
  def pretty; end

  # source://git//lib/git/status.rb#113
  def pretty_file(file); end

  # source://git//lib/git/status.rb#88
  def untracked; end

  # source://git//lib/git/status.rb#100
  def untracked?(file); end

  private

  # source://git//lib/git/status.rb#300
  def case_aware_include?(cased_hash, downcased_hash, file); end

  # source://git//lib/git/status.rb#221
  def construct_status; end

  # source://git//lib/git/status.rb#280
  def downcase_keys(hash); end

  # source://git//lib/git/status.rb#259
  def fetch_added; end

  # source://git//lib/git/status.rb#250
  def fetch_modified; end

  # source://git//lib/git/status.rb#242
  def fetch_untracked; end

  # source://git//lib/git/status.rb#273
  def ignore_case?; end

  # source://git//lib/git/status.rb#288
  def lc_added; end

  # source://git//lib/git/status.rb#284
  def lc_changed; end

  # source://git//lib/git/status.rb#292
  def lc_deleted; end

  # source://git//lib/git/status.rb#296
  def lc_untracked; end
end

# source://git//lib/git/status.rb#135
class Git::Status::StatusFile
  # source://git//lib/git/status.rb#194
  def initialize(base, hash); end

  # source://git//lib/git/status.rb#206
  def blob(type = T.unsafe(nil)); end

  # source://git//lib/git/status.rb#157
  def mode_index; end

  # source://git//lib/git/status.rb#157
  def mode_index=(_arg0); end

  # source://git//lib/git/status.rb#164
  def mode_repo; end

  # source://git//lib/git/status.rb#164
  def mode_repo=(_arg0); end

  # source://git//lib/git/status.rb#139
  def path; end

  # source://git//lib/git/status.rb#139
  def path=(_arg0); end

  # source://git//lib/git/status.rb#171
  def sha_index; end

  # source://git//lib/git/status.rb#171
  def sha_index=(_arg0); end

  # source://git//lib/git/status.rb#177
  def sha_repo; end

  # source://git//lib/git/status.rb#177
  def sha_repo=(_arg0); end

  # source://git//lib/git/status.rb#192
  def stage; end

  # source://git//lib/git/status.rb#192
  def stage=(_arg0); end

  # source://git//lib/git/status.rb#150
  def type; end

  # source://git//lib/git/status.rb#150
  def type=(_arg0); end

  # source://git//lib/git/status.rb#182
  def untracked; end

  # source://git//lib/git/status.rb#182
  def untracked=(_arg0); end
end

# source://git//lib/git/errors.rb#149
class Git::TimeoutError < ::Git::SignaledError
  # source://git//lib/git/errors.rb#166
  def initialize(result, timeout_duration); end

  # source://git//lib/git/errors.rb#178
  def error_message; end

  # source://git//lib/git/errors.rb#192
  def timeout_duration; end
end

# source://git//lib/git/url.rb#15
class Git::URL
  class << self
    # source://git//lib/git/url.rb#64
    def clone_to(url, bare: T.unsafe(nil), mirror: T.unsafe(nil)); end

    # source://git//lib/git/url.rb#47
    def parse(url); end
  end
end

# source://git//lib/git/url.rb#19
Git::URL::GIT_ALTERNATIVE_SSH_SYNTAX = T.let(T.unsafe(nil), Regexp)

# source://git//lib/git/errors.rb#205
class Git::UnexpectedResultError < ::Git::Error; end

# source://git//lib/git/version.rb#6
Git::VERSION = T.let(T.unsafe(nil), String)

# source://git//lib/git/working_directory.rb#4
class Git::WorkingDirectory < ::Git::Path; end

# source://git//lib/git/worktree.rb#7
class Git::Worktree < ::Git::Path
  # source://git//lib/git/worktree.rb#11
  def initialize(base, dir, gcommit = T.unsafe(nil)); end

  # source://git//lib/git/worktree.rb#24
  def add; end

  # source://git//lib/git/worktree.rb#9
  def dir; end

  # source://git//lib/git/worktree.rb#9
  def dir=(_arg0); end

  # source://git//lib/git/worktree.rb#9
  def full; end

  # source://git//lib/git/worktree.rb#9
  def full=(_arg0); end

  # source://git//lib/git/worktree.rb#19
  def gcommit; end

  # source://git//lib/git/worktree.rb#9
  def gcommit=(_arg0); end

  # source://git//lib/git/worktree.rb#28
  def remove; end

  # source://git//lib/git/worktree.rb#32
  def to_a; end

  # source://git//lib/git/worktree.rb#36
  def to_s; end
end

# source://git//lib/git/worktrees.rb#5
class Git::Worktrees
  include ::Enumerable

  # source://git//lib/git/worktrees.rb#9
  def initialize(base); end

  # source://git//lib/git/worktrees.rb#30
  def [](worktree_name); end

  # source://git//lib/git/worktrees.rb#26
  def each(&block); end

  # source://git//lib/git/worktrees.rb#45
  def prune; end

  # source://git//lib/git/worktrees.rb#22
  def size; end

  # source://git//lib/git/worktrees.rb#37
  def to_s; end
end

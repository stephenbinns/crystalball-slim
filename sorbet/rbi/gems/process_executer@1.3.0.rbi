# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `process_executer` gem.
# Please instead update this file by running `bin/tapioca gem process_executer`.


# source://process_executer//lib/process_executer/monitored_pipe.rb#6
module ProcessExecuter
  class << self
    # source://process_executer//lib/process_executer.rb#256
    def run(*command, logger: T.unsafe(nil), **options_hash); end

    # source://process_executer//lib/process_executer.rb#67
    def spawn(*command, **options_hash); end

    private

    # source://process_executer//lib/process_executer.rb#271
    def wait_for_process(pid, options); end
  end
end

# source://process_executer//lib/process_executer/command.rb#5
module ProcessExecuter::Command; end

# source://process_executer//lib/process_executer/command/errors.rb#67
class ProcessExecuter::Command::CommandError < ::ProcessExecuter::Command::Error
  # source://process_executer//lib/process_executer/command/errors.rb#79
  def initialize(result); end

  # source://process_executer//lib/process_executer/command/errors.rb#91
  def error_message; end

  # source://process_executer//lib/process_executer/command/errors.rb#104
  def result; end
end

# source://process_executer//lib/process_executer/command/errors.rb#52
class ProcessExecuter::Command::Error < ::StandardError; end

# source://process_executer//lib/process_executer/command/errors.rb#111
class ProcessExecuter::Command::FailedError < ::ProcessExecuter::Command::CommandError; end

# source://process_executer//lib/process_executer/command/errors.rb#166
class ProcessExecuter::Command::ProcessIOError < ::ProcessExecuter::Command::Error; end

# source://process_executer//lib/process_executer/command/result.rb#22
class ProcessExecuter::Command::Result < ::SimpleDelegator
  # source://process_executer//lib/process_executer/command/result.rb#31
  def initialize(command, status, stdout, stderr); end

  # source://process_executer//lib/process_executer/command/result.rb#42
  def command; end

  # source://process_executer//lib/process_executer/command/result.rb#54
  def stderr; end

  # source://process_executer//lib/process_executer/command/result.rb#72
  def stderr_to_s; end

  # source://process_executer//lib/process_executer/command/result.rb#48
  def stdout; end

  # source://process_executer//lib/process_executer/command/result.rb#62
  def stdout_to_s; end
end

# source://process_executer//lib/process_executer/command/runner.rb#19
class ProcessExecuter::Command::Runner
  # source://process_executer//lib/process_executer/command/runner.rb#28
  def initialize(logger); end

  # source://process_executer//lib/process_executer/command/runner.rb#61
  def call(*command, out: T.unsafe(nil), err: T.unsafe(nil), merge: T.unsafe(nil), raise_errors: T.unsafe(nil), **options_hash); end

  # source://process_executer//lib/process_executer/command/runner.rb#36
  def logger; end

  private

  # source://process_executer//lib/process_executer/command/runner.rb#144
  def log_result(result); end

  # source://process_executer//lib/process_executer/command/runner.rb#125
  def process_result(command, status, out, err, timeout, raise_errors); end

  # source://process_executer//lib/process_executer/command/runner.rb#161
  def raise_pipe_error(command, pipe_name, pipe); end

  # source://process_executer//lib/process_executer/command/runner.rb#90
  def spawn(command, out:, err:, **options_hash); end
end

# source://process_executer//lib/process_executer/command/errors.rb#117
class ProcessExecuter::Command::SignaledError < ::ProcessExecuter::Command::CommandError; end

# source://process_executer//lib/process_executer/command/errors.rb#126
class ProcessExecuter::Command::TimeoutError < ::ProcessExecuter::Command::SignaledError
  # source://process_executer//lib/process_executer/command/errors.rb#144
  def initialize(result, timeout_duration); end

  # source://process_executer//lib/process_executer/command/errors.rb#159
  def timeout_duration; end
end

# source://process_executer//lib/process_executer/monitored_pipe.rb#46
class ProcessExecuter::MonitoredPipe
  # source://process_executer//lib/process_executer/monitored_pipe.rb#58
  def initialize(*writers, chunk_size: T.unsafe(nil)); end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#169
  def chunk_size; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#85
  def close; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#258
  def exception; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#129
  def fileno; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#214
  def pipe_reader; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#225
  def pipe_writer; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#245
  def state; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#203
  def thread; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#111
  def to_io; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#151
  def write(data); end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#190
  def writers; end

  private

  # source://process_executer//lib/process_executer/monitored_pipe.rb#338
  def close_pipe; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#294
  def file_descriptor?(writer); end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#270
  def monitor; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#282
  def monitor_pipe; end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#304
  def write_data(data); end

  # source://process_executer//lib/process_executer/monitored_pipe.rb#318
  def write_data_to_fd(file_descriptor, data); end
end

# source://process_executer//lib/process_executer/options.rb#14
class ProcessExecuter::Options
  # source://process_executer//lib/process_executer/options.rb#86
  def initialize(**options); end

  # source://process_executer//lib/process_executer/options.rb#66
  def chdir; end

  # source://process_executer//lib/process_executer/options.rb#66
  def close_others; end

  # source://process_executer//lib/process_executer/options.rb#66
  def err; end

  # source://process_executer//lib/process_executer/options.rb#66
  def in; end

  # source://process_executer//lib/process_executer/options.rb#66
  def new_pgroup; end

  # source://process_executer//lib/process_executer/options.rb#66
  def out; end

  # source://process_executer//lib/process_executer/options.rb#66
  def pgroup; end

  # source://process_executer//lib/process_executer/options.rb#66
  def rlimit_resourcename; end

  # source://process_executer//lib/process_executer/options.rb#100
  def spawn_options; end

  # source://process_executer//lib/process_executer/options.rb#66
  def timeout; end

  # source://process_executer//lib/process_executer/options.rb#66
  def umask; end

  # source://process_executer//lib/process_executer/options.rb#66
  def unsetenv_others; end

  private

  # source://process_executer//lib/process_executer/options.rb#128
  def assert_no_unknown_options(options); end

  # source://process_executer//lib/process_executer/options.rb#137
  def assert_timeout_is_valid; end

  # source://process_executer//lib/process_executer/options.rb#164
  def include_spawn_option?(option, value); end

  # source://process_executer//lib/process_executer/options.rb#147
  def invalid_timeout_message; end

  # source://process_executer//lib/process_executer/options.rb#121
  def options; end

  # source://process_executer//lib/process_executer/options.rb#155
  def valid_option?(option); end
end

# source://process_executer//lib/process_executer/options.rb#60
ProcessExecuter::Options::ALL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://process_executer//lib/process_executer/options.rb#42
ProcessExecuter::Options::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://process_executer//lib/process_executer/options.rb#32
ProcessExecuter::Options::NON_SPAWN_OPTIONS = T.let(T.unsafe(nil), Array)

# source://process_executer//lib/process_executer/options.rb#38
ProcessExecuter::Options::NOT_SET = T.let(T.unsafe(nil), Symbol)

# source://process_executer//lib/process_executer/options.rb#24
ProcessExecuter::Options::SPAWN_OPTIONS = T.let(T.unsafe(nil), Array)

# source://process_executer//lib/process_executer/status.rb#11
class ProcessExecuter::Status < ::SimpleDelegator
  extend ::Forwardable

  # source://process_executer//lib/process_executer/status.rb#27
  def initialize(status, timeout, timeout_duration); end

  # source://process_executer//lib/process_executer/status.rb#56
  def success?; end

  # source://process_executer//lib/process_executer/status.rb#46
  def timeout?; end

  # source://process_executer//lib/process_executer/status.rb#37
  def timeout_duration; end

  # source://process_executer//lib/process_executer/status.rb#66
  def to_s; end
end
